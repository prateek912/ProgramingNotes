Java Input and Output Ways :

There are many ways of doing input and output in java -
	1. Scanner Class
	2. BufferedReader Class
	
	

1. Scanner Class:
		- Easy to Write
		- Very Slow compare to other ways.
		- It internally uses regular expressions to read different types.
		- A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace.
		- A Scanner is not safe for multithreaded use without external synchronization.
		
	** We can change this delimiter using method 'useDelimiter(String regex)'**
	Example:
		Scanner s = new Scanner(input).useDelimiter("\\s*fish\\s*");
		

	

	Disadvantage:
		- In Scanner class if we call nextLine() method after any one of the seven nextXXX() method then the nextLine() DOES NOT READ VALUES.
		Example:
		
			 Scanner scn = new Scanner(System.in);
			 System.out.println("Enter an integer");
			 int a = scn.nextInt();
			 System.out.println("Enter a String");
			 String b = scn.nextLine();
			 System.out.printf("You have entered:- "
					 + a + " " + "and name as " + b);
		
		Input:
			50
			Geek
		
		Output:
			Enter an integer
			Enter a String
			You have entered:- 50 and name as
	===========================================================================================================================================
	
2. BufferedReader Class:
		- Faster than Scanner Class
		- Need to write lot of code.
		- It can be used to read data line by line by readLine() method.
		- The buffer size may be specified, or the default size may be used. The default is large enough for most purposes.
		- BufferedReader should be used if we are working with multiple threads.
		- BufferedReader is a bit faster as compared to scanner because scanner does parsing of input data and BufferedReader simply reads sequence   of characters.
		
	
	Example -
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
	
	
	** We should generally wrap arround InputStream object into InputStreamReader or BufferedReader for better performance **
	
	===========================================================================================================================================
	
3. User Defined Fast IO class:
		- Very Fast, but require some complex coding.
		- See eclipse example of Fast IO.
		- Should not be used when there is lots of spliting in the string is there.
		- For small scenario, BufferedReader is efficient enough to use.
		
	===========================================================================================================================================

4. Reader Class:
		- Fastest in all the above.
		- Require very very complex coding which is hard to remember and understand.
		- It uses inputDataStream to read through the stream of data and uses read() method and nextInt() methods for taking inputs. 
		
	===========================================================================================================================================	
		